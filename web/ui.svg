<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.2" _width="154mm" _height="85.9mm" width="308mm" height="171.8mm" viewBox="0 0 53000 26000" preserveAspectRatio="xMidYMid" fill-rule="evenodd" stroke-width="28.222" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:anim="urn:oasis:names:tc:opendocument:xmlns:animation:1.0" xml:space="preserve" onload="ApplicationInitialize(evt)" style="background:black">

  <!--defs>
    <font id="EmbeddedFont_1">
      <font-face font-family="Liberation Sans embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="1852" descent="423">
	<font-face-src>
	  <font-face-uri xlink:href="/fonts.svg#Font_1" />
	</font-face-src>
      </font-face>
    </font>
  </defs -->

  <defs>
    
    <style type="text/css">
      <![CDATA[

    svg             { fill:rgb(0.0.0); }
    @font-face      { font-family: 'Liberation Sans embedded'; font-weight: normal;
                      font-style: italic;
                      src: url("fonts.svg#Font1") format("svg")
                    }

    rect.Name       { fill:rgb(0,204,255);   stroke:rgb(52,101,164); }
    text.Name       { font-family:"Liberation Sans embedded"; font-size:1905px; font-weight:400; }

    rect.Button     { fill:rgb(112,153,204); stroke:rgb(52,101,164); }
    path.Button     { fill:rgb(112,153,204); stroke:rgb(52,101,164); }
    //text.Button     { font-family:"Liberation Sans, sans-serif"; font-size:635px; font-weight:400; }
    text.Button     { font-family:"Liberation Sans embedded"; font-size:635px; font-weight:400; }

    rect.BarStatic  { fill:rgb(102,102,255); stroke:rgb(52,101,164); }
    rect.BarDynamic { fill:rgb(204,102,255); stroke:rgb(52,101,164); }
    path.BarMarker  { fill:rgb(112,153,204); stroke:rgb(52,101,164); }

    circle.LED      { fill:rgb(183,214,255); stroke:rgb(52,101,164); }
    rect.LED        { fill:rgb(183,214,255); stroke:rgb(52,101,164); }
    text.LED        { font-family:"Liberation Sans embedded"; font-size:450px; font-weight:400; }

    rect.Text       { fill:rgb(183,214,255); stroke:rgb(52,101,164); }
    text.DbgOut     { font-family:"Liberation Sans embedded"; font-size:500px; font-weight:400; }

      ]]>
    </style>

    <script type="text/javascript">
      <![CDATA[

             var col_led_on  = 'rgb(255,0,0)';
             var col_led_off = 'rgb(0,0,0)';
             var col_led_hr  = 'rgb(183,214,255)';

             var col_pressed = 'rgb(204,102,255)';
             var col_button  = 'rgb(112,153,204)';
	     
             var debug = false;

             function getSubnodeById(node,id) {
               if ( node.dataset != null && node.dataset.id == id ) {
	         return node
	       }
	       var children = node.childNodes;
               for ( var i = 0; i < children.length; i++ ) {
	         var child = children[i]
	         var n = getSubnodeById( child, id );
	         if ( n != null ) return n
	       }
	       return null
	     }

             function serverRequest(url,hdl,data) {
	       xmlHTTP = new XMLHttpRequest();
	       xmlHTTP.onreadystatechange = function() {
	         if (this.readyState == 4 && this.status == 200) {
	           var text = xmlHTTP.responseText;
		   try {
  	             var jsonObj = JSON.parse(text);
		     if ( hdl ) hdl(jsonObj,data);
		     if ( jsonObj.result )
	               alert('response: '+text);
		     else
		       debugOutput( text );
		   } catch(err) {
		     alert(err+', response: '+text);
		   }
                   //alert("result: "+jsonObj.result);
	         }
               };
               xmlHTTP.open("GET", url, true);
	       xmlHTTP.send();
	     }



             function Motor(id,coord,node) {
               this.id         = id;
               this.coord      = coord;
               this.node       = node;
               this.pos_min    =   0;
               this.pos_max    = 100;
               this.position   =  50;
               this.currentPos =  70;
               this.state      =   0; // flags: 1 = pos valid, 2 = active, 4 = backward 
	     }
	     Motor.minPosPixel = 0;
	     Motor.maxPosPixel = 9400 - 1100;
	     Motor.minPos =   0;
	     Motor.maxPos = 100;
	     Motor.posToPixel_m = ( Motor.maxPosPixel - Motor.minPosPixel ) / ( Motor.maxPos - Motor.minPos );
	     Motor.posToPixel_c = Motor.minPosPixel - Motor.minPos * Motor.posToPixel_m;
	     Motor.posToPixel   = function(pos)   { return Math.floor( pos * Motor.posToPixel_m   + Motor.posToPixel_c + 0.5 ) };
	     Motor.pixelToPos   = function(pixel) { return Math.floor( (pixel-Motor.posToPixel_c) / Motor.posToPixel_m + 0.5 ) };
	     Motor.prototype.setPosition = function (pos) {
	       if ( pos < Motor.minPos ) pos = Motor.minPos;
               if ( pos > Motor.maxPos ) pos = Motor.maxPos;
               this.position = pos;
	       node  = getSubnodeById(this.node,'bar');
	       pixel = Motor.posToPixel(pos);
	       val = node[this.coord].baseVal;
	       val.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_NUMBER, pixel);
             }
	     Motor.prototype.setCurrentPositionAndState = function (pos,state) {
	       if ( pos < Motor.minPos ) pos = Motor.minPos;
               if ( pos > Motor.maxPos ) pos = Motor.maxPos;
               this.currentPos = pos;
	       node  = getSubnodeById(this.node,'bar_state');
	       pixel = Motor.posToPixel(pos);
	       trans = (this.coord=='x') ? 'translate('+pixel+',0)' : 'translate(0,'+pixel+')';
	       //alert('c:'+node[this.coord]+', transform: '+node.getAttribute('transform')+', trans: '+trans);
	       node.setAttribute('transform', trans);

               dir = (state & 0x04) >> 2;
	       node = getSubnodeById(this.node,'dir_'+dir);
	       node.style = 'display:inline';

               dir = 1 - dir;
	       node = getSubnodeById(this.node,'dir_'+dir);
	       node.style = 'display:none';
             }



             function P_Window (id) {
	       P_Window.windows[id] = this;
	       this.id              = id;
	       var node = document.getElementById('win_'+id);
	       // to allow access to used tree by <use ...> tag
	       this.init2(node.childNodes[1]) // simple access due to use-tag replaced by the template tree
	       //alert( "window "+id+" constructed, name: "+this.NameNode );
               this.opener = new Motor('opener_'+id,'x',this.getSubNode('opener'));
               this.shadow = new Motor('shadow_'+id,'y',this.getSubNode('shadow'));
             }
	     P_Window.windows = {};
	     P_Window.prototype.getSubNode     = function (id)   { return getSubnodeById( this.WinNode, id );   };
	     P_Window.prototype.setName        = function (name) { this.NameNode.children[1].textContent = name };
	     P_Window.prototype.setOpenerState = function (state){ this.NameNode.children[1].textContent = name };
	     P_Window.prototype.setOpenerPos   = function (pos)  { this.NameNode.children[1].textContent = name };

             P_Window.prototype.serverReq = function (reqType,param,hdl)  {
               if ( null == hdl ) hdl = P_Window.resultHandler;
	       serverRequest('/request/window/'+reqType+'.json?win_id='+this.id+param,hdl,this);
	     };
	     P_Window.resultHandler = function (res,self) {
	       if ( null == res ) {
	         debugOutput( 'resultHandler error' );
	       } else if ( res.result ) {
		 debugOutput( res.toString() );
	       } else {
		 debugOutput( res.toString() );
	         if ( null != res.sr_state ) {
		   SR_LEDs.result(res,null)
	         }
	       }	 
             };
	     P_Window.prototype.buttonClick       = function (nr)   {
	       if        ( 1 == nr || 2 == nr ) {
	         var pos = nr == 1 ? 0 : 100
	         this.serverReq('action','&action=set_position&motor=opener&pos='+pos);
	       } else if ( 3 == nr || 4 == nr ) {
	         var pos = nr == 3 ? 0 : 100
	         var angle = pos;
	         this.serverReq('action','&action=set_position&motor=blind&pos='+pos+'&angle='+angle);
	       }
             };
	     P_Window.prototype.buttonClick2 = function (nr)   {
	       //this.serverReq('&action='+nr);
	       if ( nr == 5 || nr == 6 ) {
	         motor = ( nr == 5 ) ? this.opener : this.shadow;
	         pos = motor.position;
		 motor.setPosition( motor.position + 5 );
		 motor.setCurrentPositionAndState( motor.currentPos + 3, 3 + (motor.currentPos % 2) << 2 );
	       }
	     };
	     P_Window.prototype.buttonPress = function (nr)   {
	       if        ( 1 == nr || 2 == nr ) {
	         var dir = nr == 1 ? 1 : 0
	         this.serverReq('action','&action=drive_direction&motor=opener&dir='+dir);
	       } else if ( 3 == nr || 4 == nr ) {
	         var dir = nr == 3 ? 1 : 0
	         this.serverReq('action','&action=drive_direction&motor=blind&dir='+dir);
	       }
	     };
	     P_Window.prototype.buttonRelease = function (nr)   {
	       if        ( 1 == nr || 2 == nr ) {
	         var pos = nr == 1 ? 100 : 0
	         this.serverReq('action','&action=drive_direction&motor=opener&stop=1');
	       } else if ( 3 == nr || 4 == nr ) {
	         var pos = nr == 3 ? 100 : 0
	         var angle = pos;
	         this.serverReq('action','&action=drive_direction&motor=blind&stop=1');
	       }
	     };
	     P_Window.prototype.init2       = function (win_node) {
	       this.WinNode  = win_node; win_node.P_Window = this;
	       this.NameNode = this.getSubNode('w_name');
	       //alert( "NameNode: "+this.NameNode );
	       this.setName(this.id);
	     };

             P_Window.onuse = function (useNode,winNode) {
	       var id = useNode.id
	       if ( id != null && id.substr(0,4) == 'win_' ) {
	         var wid = id.substr(4);
		 //alert( "create: '"+wid+"', parent: "+getNodeDetails(useNode));
		 new P_Window(wid);
	       }
	     };


             function ApplicationInitialize (evt) {
               var eList = document.getElementsByTagName('g');
	       for ( var i = 0; i < eList.length; i++ ) {
	         var node = eList[i];
                 if ( null != node.dataset.onuse && 'g' == node.parentNode.nodeName ) {
		   var useNode = node.parentNode;
		   var f = eval(node.dataset.onuse)
		   f(useNode,node)
                 }
	       }
	     }


             P_Window.mouseEvent = function (node,nr,t) {
	       var dt = 200; // time between down and up for a click
	       if ( t == 1 ) { // mouse down
	         P_Window.mouseEvent.data = { 'node': node, 'date': Date.now() };
	         P_Window.mouseEvent.data.timeoutID = setTimeout( function () { P_Window.mouseEvent( node, nr, 2 ) }, dt );
	       } else if ( t == 0 ) { // mouse up
	         if ( node == P_Window.mouseEvent.data.node ) {
		   data = P_Window.mouseEvent.data; P_Window.mouseEvent.data = null;
		   clearTimeout(data.timeoutID);
		   pWin = getWindow(node)
	           if ( ! data.btnPressed ) {
		     toggle_btn('click',1);
		     pWin.buttonClick(nr);
		   } else {
		     toggle_btn('release',1);
		     pWin.buttonRelease(nr);
		   }
	         }
	       } else if ( t == 2 ) {
	         data = P_Window.mouseEvent.data;
	         if ( data != null && data.node == node ) {
		   data.btnPressed = 1
		   pWin = getWindow(node);
		   toggle_btn('press',1);
		   pWin.buttonPress(nr);
                 }
	       }
             };


	     function getUseNode(node) {
	       var win = getWindowNode(node)
	       return win.P_UseNode;
	     }
	     function getWindowNode(node) {
	       if ( node.P_WindowNode ) return node.P_WindowNode;
	       var sucNode = node;
	       var winNode = null;
	       while ( node != null ) {
 	         //if ( winNode != null ) { alert("winNode: "+winNode.dataset.id+', id: '+winNode.id) }
                 //if ( winNode != null && node.parentNode == null && node.host != null ) {
		 //  useNode = node;
	         if ( winNode != null && winNode.dataset.id == 'w_window' ) {
		   useNode = node;
		   winNode.P_UseNode    = useNode;
		   winNode.P_WindowNode = winNode;
	           useNode.P_WindowNode = winNode;
		   sucNode.P_WindowNode = winNode;
		   return winNode;
                 }
		 winNode = node
		 node = node.parentNode
	       }
	       return;
	     }


	     function getWindow(node) {
	       var winNode = getWindowNode(node);
	       if ( winNode.P_Window ) return winNode.P_Window;
               var id = winNode.P_UseNode.id.substr(4);
	       winNode.P_Window = P_Window.initialize2(id,root);
	       return winNode.P_Window;
	     }


	     function getAncesterList(node) {
	       var s = "";
	       while ( node != null ) {
	         s += "\nname: "+node.nodeName+" type: "+node.nodeType+" id: "+node.id+" parentElement: "+node.parentElement+" shadowRoot: "+node.shadowRoot+" host: "+node.host;
		 node = node.parentNode;
	       }
	       return s;
	     }


             function getRoot(node) {
	       while ( node != null && node.parentNode != null ) {
	         node = node.parentNode;
	       }
	       return node;
	     }


             function getNodeDetails(node,obj) {
	       var s = "name: "+node.nodeName+" type: "+node.nodeType+" id: "+node.id+"\n\nAttributes: [";
	       for ( var key in node ) {
	         if ( obj != null ) {
                   if ( node[key] == obj            ) s += "***";
		   if ( node[key] == obj.firstChild ) s += "###";
		 }
		 s += " '"+key+"'"
               }
	       s += " ]\n\n";
	       for ( var key in node.getAttributeNames() ) {
		 s += " '"+node.getAttribute(key)+"'"
               }
	       return s;
	     }


	     function mouse(obj,nr,t) {
	       win = getWindow(obj);
	       toggle_mouse(t);
               if ( debug ) {
	         var s = "Mouse "+t+"!\n";
                 alert( s );
	       }
	     }


	     function drag_event(obj,nr,t) {
	       win = getWindow(obj);
	       toggle_drag(t,1);
               setTimeout(function(){ toggle_drag(t,0); },300);
	       if ( debug ) {
	         var s = "Drag "+t+"!\n";
                 alert( s );
	       }
	     }


	     function bar_click(obj,nr) {
	       getWindow(obj);
	       toggle_click(1);
	       setTimeout(function(){ toggle_click(0); },300);
	       if ( debug ) {
	         var id = obj.id;
                 alert('Bar wurde angeklickt!\n'+id)
               }
             }
	       
	     function debugOutput(text) {
	       node = document.getElementById('dbg_output');
	       node.textContent = text;
	     }
	       
	     function toggle_debug(node) {
	       debug = ! debug;
	       rect  = document.getElementById('btn_debug_face'); // node.childNodes[1];
	       //alert( "rect: "+rect );
	       rect.style.fill = debug ? col_pressed : col_button;
             }
	       
	     function toggle_mouse(on) {
	       rect = document.getElementById('ind_mouse');
	       rect.style.fill = on ? col_pressed : col_button;
             }
  
	     function toggle_click(on) {
	       rect = document.getElementById('ind_click');
	       rect.style.fill = on ? col_pressed : col_button;
             }
	       
	     function toggle_drag(name,on) {
	       rect = document.getElementById('ind_drag_'+name);
	       rect.style.fill = on ? col_pressed : col_button;
             }
	       
	     function toggle_btn(name,on) {
	       rect = document.getElementById('ind_btn_'+name);
	       rect.style.fill = on ? col_pressed : col_button;
	       if ( on ) setTimeout(function(){ toggle_btn(name,0); },300);
             }


	     function SR_LEDs() {
             }
	     SR_LEDs.onuse = function (useNode,node) {
	       var n = parseInt(useNode.id.substr(10));
	       var text = getSubnodeById(node,'text');
	       var on   = getSubnodeById(node,'on');
	       var dir  = getSubnodeById(node,'dir');
	       on. setAttribute('onclick', "SR_LEDs.click("+n+",0,'on')" );
	       dir.setAttribute('onclick', "SR_LEDs.click("+n+",1,'dir')");
	       text.textContent = n*2;
	     };
	     SR_LEDs.click = function (motor,t,name) {
	       var bit = motor * 2 + t
	       if ( -1 == motor ) bit = -1
               serverRequest('/request/sr_toggle.json?bit='+bit,SR_LEDs.result,null);
	     };
	     SR_LEDs.request = function () { 
               serverRequest('/request/sr_state.json',SR_LEDs.result,null);
	     };
	     SR_LEDs.result = function (res,data) {
	       if ( null == res ) {
	         debugOutput( 'SR_LEDs.result handler error' );
	       } else if ( res.result ) {
		 debugOutput( res.toString() );
	       } else if ( null == res.sr_state ) {
		 debugOutput( 'missing sr_state in: '+res.toString() );
	       } else {
		 SR_LEDs.showOutput(res.sr_state);
	       }
	     };
	     SR_LEDs.bitToNodeMap = {};
	     SR_LEDs.getBitNode = function (bit) {
	       var node = SR_LEDs.bitToNodeMap[bit]
	       if (null != node ) return node;
	       
               var led   = ( bit & 1 ) ? 'dir' : 'on';
               var motor = document.getElementById('win_motor_'+(bit>>1));
	       return SR_LEDs.bitToNodeMap[bit] = getSubnodeById(motor,led);
	     };
	     SR_LEDs.showOutput = function (state,data) {
	       document.getElementById('LED_enable').style.fill = state.enable ? col_led_on : col_led_off;

               var bits = state.bits;
	       if ( state.output ) {
	         for ( var bitIdx = 0; bitIdx < bits; bitIdx++ ) {
	           var byteVal = state.output[Math.floor(bitIdx/8)];
	           var bitPos  = bitIdx % 8
		   bitValue = ( byteVal & ( 1 << bitPos) ) ? 1 : 0;

                   ledNode = SR_LEDs.getBitNode(bitIdx);
		   ledNode.style.fill = bitValue ? col_led_on : col_led_off;
	         }
	       }   
             };
	     SR_LEDs.clickNode = function (node,bit) {
	       //var bit 
	       
             };
	     SR_LEDs.thread = function () {
               SR_LEDs.request()
               setTimeout(SR_LEDs.thread,2000);
             };
	     SR_LEDs.thread();
	       
      ]]>
    </script>

    <linearGradient id="gradient_h" x1="0" y1="0" x2="9400" y2="0" gradientUnits="userSpaceOnUse">
      <stop offset="0" style="stop-color:rgb(52,101,164)"/>
      <stop offset="1" style="stop-color:rgb(255,255,255)"/>
    </linearGradient>

    <linearGradient id="gradient_v" x1="0" y1="0" x2="0" y2="9400" gradientUnits="userSpaceOnUse">
      <stop offset="0" style="stop-color:rgb(255,255,255)"/>
      <stop offset="1" style="stop-color:rgb(52,101,164)"/>
    </linearGradient>

    <mask id="mask_h">
      <path style="fill:rgb(255,255,255)" d="M 0,0 L 9400,0 9400,9400 Z"/>
      <path style="fill:rgb(  0,  0,  0)" d="M 0,0 L 0,9400 9400,9400 Z"/>
    </mask>

    <mask id="mask_v">
      <path style="fill:rgb(255,255,255)" d="M 0,0 L 0,9400 9400,9400 Z"/>
      <path style="fill:rgb(  0,  0,  0)" d="M 0,0 L 9400,0 9400,9400 Z"/>
    </mask>

    <!-- start template="w_led" -->
    <g data-id="w_led" data-onuse="SR_LEDs.onuse">
      <text data-id="text" class="LED" x="100" y="370">.</text>
      <circle data-id="on"  class="LED" cx="1000" cy="200" r="200"/>
      <circle data-id="dir" class="LED" cx="1500" cy="200" r="200"/>
    </g>
    <!-- end template="w_led" -->

    <!-- start template="w_window" -->
    <g data-id="w_window" data-onuse="P_Window.onuse">
    
      <g data-id="w_name" transform="translate(0,0)" onmousedown="P_Window.mouseEvent(this,0,1)" onmouseup="P_Window.mouseEvent(this,0,0)">
	<rect class="Name" x="0" y="0" width="3000" height="2600"/>
	<text class="Name" x="300" y="1900">.</text>
      </g>
    
      <g data-id="w_btn_c" transform="translate(3000,0)" onmousedown="P_Window.mouseEvent(this,1,1)" onmouseup="P_Window.mouseEvent(this,1,0)">
	<rect class="Button" x="0" y="0" width="4700" height="2600"/>
	<text class="Button" x="1614" y="1486">close</text>
      </g>

      <g data-id="w_btn_o" transform="translate(7700,0)" onmousedown="P_Window.mouseEvent(this,2,1)" onmouseup="P_Window.mouseEvent(this,2,0)">
	<rect class="Button" x="0" y="0" width="4700" height="2600"/>
	<text class="Button" x="1614" y="1486">open</text>
      </g>
    
      <g data-id="w_btn_r" transform="translate(0,2600)" onmousedown="P_Window.mouseEvent(this,3,1)" onmouseup="P_Window.mouseEvent(this,3,0)">
	<rect class="Button" x="0" y="0" width="3000" height="4700"/>
	<text class="Button" x="700" y="2500">raise</text>
      </g>
    
      <g data-id="w_btn_l" transform="translate(0,7300)" onmousedown="P_Window.mouseEvent(this,4,1)" onmouseup="P_Window.mouseEvent(this,4,0)">
	<rect class="Button" x="0" y="0" width="3000" height="4700"/>
	<text class="Button" x="700" y="2500">lower</text>
      </g>

      <g transform="translate(3000,2600)">
	<path style="fill:url(#gradient_h)" d="M 0,0 L 9400,0 9400,9400 Z"/>
	<path style="fill:url(#gradient_v)" d="M 0,0 L 0,9400 9400,9400 Z"/>

	<g data-id="opener" style="mask:url(#mask_h)">
	  <rect data-id="bar" class="BarStatic" x="300" y="0" width="1100" height="9400" onmousedown="P_Window.mouseEvent(this,5,1)" onmouseup="P_Window.mouseEvent(this,5,0)"/>
	  <g data-id="bar_state" transform="translate(2000,0)">
	    <rect class="BarDynamic" x="0" y="0" width="1100" height="9400"/>
	    <path data-id="dir_0" class="BarMarker" d="M 100,550 L 1000,100 1000,1000 Z" style="display:none"/>
	    <path data-id="dir_1" class="BarMarker" d="M 1000,550 L 100,100 100,1000 Z" style="display:inline"/>
	  </g>
	</g>

	<g data-id="shadow" style="mask:url(#mask_v)">
	  <rect data-id="bar" class="BarStatic" x="0" y="6000" width="9400" height="1100" onmousedown="P_Window.mouseEvent(this,6,1)" onmouseup="P_Window.mouseEvent(this,6,0)"/>
	  <g data-id="bar_state" transform="translate(0,4000)">
	    <rect class="BarDynamic" x="0" y="0" width="9400" height="1100"/>
	    <path data-id="dir_0" class="BarMarker" d="M 550,100 L 100,1000 1000,1000 Z" style="display:none"/>
	    <path data-id="dir_1" class="BarMarker" d="M 550,1000 L 100,100 1000,100 Z" style="display:inline"/>
	  </g>
	</g>
	
      </g>

    </g>
    <!-- end template="w_window" -->

  </defs>

  <use id="win_L4" href="#w_window" x="500"   y="500"/>
  <use id="win_L3" href="#w_window" x="13500" y="500"/>
  <use id="win_L2" href="#w_window" x="26500" y="500"/>
  <use id="win_L1" href="#w_window" x="39500" y="500"/>
  
  <use id="win_R4" href="#w_window" x="500"   y="13000"/>
  <use id="win_R1" href="#w_window" x="39500" y="13000"/>

  <g transform="translate(13500,13000)" onclick="toggle_debug(this)">
    <rect id="btn_debug_face" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">debug</text>
  </g>

  <g transform="translate(13500,14900)">
    <rect id="ind_mouse" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">mouse</text>
  </g>

  <g transform="translate(13500,16800)">
    <rect id="ind_move" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">move</text>
  </g>

  <g transform="translate(13500,20700)">
    <rect id="ind_click" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">click</text>
  </g>

  
  <g transform="translate(16600,13000)" onclick="toggle_debug(this)">
    <rect id="ind_drag_0" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">start</text>
  </g>

  <g transform="translate(16600,14900)">
    <rect id="ind_drag_1" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">drag</text>
  </g>

  <g transform="translate(16600,16800)">
    <rect id="ind_drag_2" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">end</text>
  </g>

  <g transform="translate(16600,20700)">
    <rect id="ind_" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">_</text>
  </g>

  
  <g transform="translate(19700,13000)" onclick="toggle_debug(this)">
    <rect id="ind_btn_click" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">click</text>
  </g>

  <g transform="translate(19700,14900)">
    <rect id="ind_btn_press" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">press</text>
  </g>

  <g transform="translate(19700,16800)">
    <rect id="ind_btn_release" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">release</text>
  </g>
  
  <g transform="translate(19700,18700)">
    <rect id="ind_btn_move" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">move</text>
  </g>

<!--
  <g transform="translate(22800,13000)">
    <rect class="Text" x="0" y="0" width="15000" height="1800"/>
    <text id="dbg_output" class="DbgOut" x="300" y="1400">.</text>
  </g>
-->

  <g transform="translate(500,0)">
    <rect class="Text" x="0" y="-500" width="30000" height="700"/>
    <text id="dbg_output" class="DbgOut" x="200" y="0">.</text>
  </g>

  <g transform="translate(22800,14900)">
    <rect class="Text" x="0" y="0" width="1900" height="6900"/>
    <circle id="LED_enable" class="LED" cx="300" cy="300" r="200" onclick="SR_LEDs.click(-1,-1,'enable')"/>
    <text class="LED" x="800" y="400">en</text>

    <use id="win_motor_0"  href="#w_led" x="0" y="700"/>
    <use id="win_motor_1"  href="#w_led" x="0" y="1200"/>
    <use id="win_motor_2"  href="#w_led" x="0" y="1700"/>
    <use id="win_motor_3"  href="#w_led" x="0" y="2200"/>
    <use id="win_motor_4"  href="#w_led" x="0" y="2700"/>
    <use id="win_motor_5"  href="#w_led" x="0" y="3200"/>
    <use id="win_motor_6"  href="#w_led" x="0" y="3700"/>
    <use id="win_motor_7"  href="#w_led" x="0" y="4200"/>
    <use id="win_motor_8"  href="#w_led" x="0" y="4700"/>
    <use id="win_motor_9"  href="#w_led" x="0" y="5200"/>
    <use id="win_motor_10" href="#w_led" x="0" y="5700"/>
    <use id="win_motor_11" href="#w_led" x="0" y="6200"/>
  </g>

</svg>
