<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.2" _width="154mm" _height="85.9mm" width="308mm" height="171.8mm" viewBox="0 0 53000 26000" preserveAspectRatio="xMidYMid" fill-rule="evenodd" stroke-width="28.222" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:anim="urn:oasis:names:tc:opendocument:xmlns:animation:1.0" xml:space="preserve" onload="ApplicationInitialize(evt)" style="background:black">

  <!--
      User Interface of room-control

Basic technics:
The <use> tags for windows and leds are interpreted by the webserver by copying the code of the "start template" / "end template" comments 
Communication to the Server is don by the function serverRequest() using ajax/XMLHttpRequest and JSON.parse(text).

Classes:
Room
Motor
P_Window
SR_LEDs


Future steps:

Dragging
https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_draggable
http://www.codedread.com/blog/archives/2005/12/21/how-to-enable-dragging-in-svg/
http://phrogz.net/SVG/screen_location_for_element.xhtml

Authentication
https://gist.github.com/dragermrb/108158f5a284b5fba806
  -->

  <!--defs>
    <font id="EmbeddedFont_1">
      <font-face font-family="Liberation Sans embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="1852" descent="423">
	<font-face-src>
	  <font-face-uri xlink:href="/fonts.svg#Font_1" />
	</font-face-src>
      </font-face>
    </font>
  </defs -->

  <defs>
    
    <style type="text/css">
      <![CDATA[

    svg             { fill:rgb(0.0.0); }
    @font-face      { font-family: 'Liberation Sans embedded'; font-weight: normal;
                      font-style: italic;
                      src: url("fonts.svg#Font1") format("svg")
                    }

    rect.Name       { fill:rgb(0,204,255);   stroke:rgb(52,101,164); }
    text.Name       { font-family:"Liberation Sans embedded"; font-size:1905px; font-weight:400; }

    rect.Button     { fill:rgb(112,153,204); stroke:rgb(52,101,164); }
    path.Button     { fill:rgb(112,153,204); stroke:rgb(112,153,204); }
    //text.Button     { font-family:"Liberation Sans, sans-serif"; font-size:635px; font-weight:400; }
    text.Button     { font-family:"Liberation Sans embedded"; font-size:635px; font-weight:400; }

    rect.BarStatic  { fill:rgb(102,102,255); stroke:rgb(52,101,164); }
    rect.BarDynamic { fill:rgb(204,102,255); stroke:rgb(52,101,164); }
    rect.BarMarker  { fill:rgb(112,153,204); stroke:rgb(52,101,164); }
    path.BarMarker  { fill:rgb(112,153,204); stroke:rgb(52,101,164); }

    circle.LED      { fill:rgb(183,214,255); stroke:rgb(52,101,164); }
    rect.LED        { fill:rgb(183,214,255); stroke:rgb(52,101,164); }
    text.LED        { font-family:"Liberation Sans embedded"; font-size:450px; font-weight:400; }

    rect.Text       { fill:rgb(183,214,255); stroke:rgb(52,101,164); }
    text.DbgOut     { font-family:"Liberation Sans embedded"; font-size:500px; font-weight:400; }

      ]]>
    </style>

    <script type="text/javascript">
      <![CDATA[

             var col_led_on  = 'rgb(255,0,0)';
             var col_led_off = 'rgb(0,0,0)';
             var col_led_hr  = 'rgb(183,214,255)';

             var col_pressed = 'rgb(204,102,255)';
             var col_button  = 'rgb(112,153,204)';
	     


             function setNodeActive(node,autoreset) {
	       node.style.fill = col_pressed;
	       if (autoreset)
	         setTimeout(function(){node.style.fill = col_button;}, 500 );
	     }

             function setButtonActive(node,autoreset) {
	       setNodeActive(node.childNodes[1], autoreset);
	     }



             function Room() {
               this.debug = false;
	       this.setBusy(false);
             }
	       
	     Room.prototype.logOutput = function (text) {
	       console.log(text);
	       Room.logText += text.toString()+"; \r\n";  
	       text = Room.logText;
               this.debugOutput(text);
               var node = document.getElementById('log_output');
	       node.textContent = text;
	     };
	     Room.logText = '';  
	     
	     Room.prototype.debugOutput = function (text) {
	       var node = document.getElementById('dbg_output');
	       node.textContent = text;
	     };
	     
	     Room.prototype.toggle_debug = function (node) {
	       this.debug = ! this.debug;
	       var rect = document.getElementById('btn_debug_face');
	       rect.style.fill = this.debug ? col_pressed : col_button;
             };
	       
	     Room.prototype.setBusy = function ( busy ) {
	       busy = busy ? true : false;
	       if ( this.busy == busy ) return;
	       this.busy = busy ? true : false;
	       var rect = document.getElementById('ind_busy');
	       rect.style.fill = busy ? col_pressed : col_button;
	       this.updateThread();
	     };
	     
	     Room.prototype.updateThread = function () {
	       if ( null != this.threadTimeout ) clearTimeout( this.threadTimeout );
               serverRequest('/request/window/state.json', P_Window.resultHandler, null);
	       var room = this;
	       this.threadTimeout = setTimeout(function(){room.updateThread()}, (room.busy ? 200 : 1000) );
             };

             Room.prototype.action_click = function (node,action) {
	       rect = node.childNodes[1]
	       setNodeActive(rect,1);
	       serverRequest('/request/room/action.json?action='+action, P_Window.resultHandler, null);
	       for ( var win_id in P_Window.windows ) {
	         win = P_Window.windows[win_id];
	         try {
	           if      ( 'all_close' == action ) { var m = win.opener; m.setPosition(m.minPos); }
	           else if ( 'all_open'  == action ) { var m = win.opener; m.setPosition(m.maxPos); }
	           else if ( 'all_raise' == action ) { var b = win.blind;  b.setPosition(b.minPos);
		                                       var s = win.slat;   s.setPosition(s.maxAngle); }
	           else if ( 'all_lower' == action ) { var b = win.blind;  b.setPosition(b.maxPos);
		                                       var s = win.slat;   s.setPosition(s.minAngle); }
		 } catch ( e ) {
		   alert( "win: '"+win+"', " + e )
		 }
	       }
             };



             function ApplicationInitialize (evt) {
               room = new Room();

               var eList = document.getElementsByTagName('g');
	       for ( var i = 0; i < eList.length; i++ ) {
	         var node = eList[i];
                 if ( null != node.dataset.onuse && 'g' == node.parentNode.nodeName ) {
		   var useNode = node.parentNode;
		   var f = eval(node.dataset.onuse)
		   try { f(useNode,node) }
		   catch (err) { alert( "error onuse: '"+node.dataset.onuse+"', "+err ) }
                 }
	       }
	       room.logOutput("Application initialized")
	     }



             function getSubnodeById(node,id) {
               if ( node.dataset != null && node.dataset.id == id ) {
	         return node
	       }
	       var children = node.childNodes;
               for ( var i = 0; i < children.length; i++ ) {
	         var child = children[i]
	         var n = getSubnodeById( child, id );
	         if ( n != null ) return n
	       }
	       return null
	     }

             function serverRequest(url,hdl,data) {
	       var xmlHTTP = new XMLHttpRequest();
	       xmlHTTP.onreadystatechange = function() {
	         if (this.readyState == 4 && this.status == 200) {
	           var text = xmlHTTP.responseText;
		   //try {
  	             var jsonObj = JSON.parse(text);
		     if ( hdl ) hdl(jsonObj,data);
		     if ( jsonObj.result )
	               alert('response: '+text);
		   //else
		   //  room.debugOutput( text );
		   //} catch(err) {
		   //  alert(err+'\nresponse: '+text+'\nurl: '+url);
		   //}
	         }
               };
               xmlHTTP.open("GET", url, true);
	       xmlHTTP.send();
	     }



	     function setNodePosition(node,x,y) {  
	       // alternate setting x,y of a g-tag
	       // var val = node[this.coord].baseVal;
	       // val[0].newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_NUMBER, pixel);
	       // https://docs.w3cub.com/dom/svglength/
	       // https://developer.mozilla.org/en-US/docs/Web/API/SVGLength
	       if      ( 'g'    == node.nodeName || 'path' == node.nodeName )
                 node.setAttribute('transform', 'translate('+x+','+y+')' );
               else if ( 'rect' == node.nodeName ) {
                 node.setAttribute('x', x);
	         node.setAttribute('y', y);
	       } else {
	         alert( 'can not set position of a '+node.nodeName );
               }
             }


             function Motor(id,coord,node,parentMotor) {
               this.id         = id;    // 'opener_' or 'blind_' or 'slat_' + win.id
               this.coord      = coord; // variable coordinate: 'x' for opener or 'y' for blinds
               this.node       = node;  // <g>-tag node 
	       this.parent     = parentMotor // the blind motor is parent of the slat motor

               this.pos_min    =   0;
               this.pos_max    = 100;
	       
               this.position     =  50;
               this.currentPos   =  70;
               this.state        =   0; // flags: 1 = pos valid, 2 = active, 4 = backward 

               this.minPosPixel  = 0;
	       this.maxPosPixel  = 9400 - 1100; // geometry of window area
	       this.minPos       =   0;
	       this.maxPos       = 100;
	       this.posToPixel_m = ( this.maxPosPixel - this.minPosPixel ) / ( this.maxPos - this.minPos );
	       this.posToPixel_c = this.minPosPixel - this.minPos * this.posToPixel_m;
             }
	     Motor.prototype.toString   = function () { return "[Motor: '"+this.id+"'"};
             Motor.prototype.posToPixel = function(pos)   { return Math.floor( pos * this.posToPixel_m   + this.posToPixel_c + 0.5 ) };
	     Motor.prototype.pixelToPos = function(pixel) { return Math.floor( (pixel-this.posToPixel_c) / this.posToPixel_m + 0.5 ) };
	     Motor.prototype.adjustMaxPosPixel = function (pos) {
	       if ( null == this.confMaxPosPixel ) this.confMaxPosPixel = this.maxPosPixel;
	       var parent = this.parent
	       this.maxPosPixel = Math.floor( (this.confMaxPosPixel ) * parent.currentPos / (parent.maxPos - parent.minPos) ) - 600;
	       if ( this.maxPosPixel < this.minPosPixel + 1 ) this.maxPosPixel < this.minPosPixel + 1 
	       this.posToPixel_m = ( this.maxPosPixel - this.minPosPixel ) / ( this.maxPos - this.minPos );
	       this.posToPixel_c = this.minPosPixel - this.minPos * this.posToPixel_m;
	     };
	     Motor.prototype.setPosition = function (pos) {
	       if ( pos < Motor.minPos ) pos = Motor.minPos;
               if ( pos > Motor.maxPos ) pos = Motor.maxPos;
               this.position = pos;
	       var node  = getSubnodeById(this.node,'bar');
	       if ( this.parent ) this.adjustMaxPosPixel();
	       var pixel = this.posToPixel(pos);
	       if ( 'rect' == node.nodeName ) {
     	         //room.debugOutput( 'Motor: '+this.id+' setPosition('+pos+') node: '+node.nodeName);
	         //node[this.coord] = pixel;
	         node.setAttribute(this.coord, pixel);
	       } else {
		 var trans = (this.coord=='x') ? [pixel,0] : [0,pixel];
	         setNodePosition(node, trans[0], trans[1]);
	       }
             };
	     Motor.prototype.setCurrentPositionAndState = function (pos,state,direction) {
	       if ( null != this.currentPosition  && this.currentPosition  == pos   &&
	            null != this.currentState     && this.currentState     == state &&
	            null != this.currentDirection && this.currentDirection == direction
	          ) return;

	       if ( pos < Motor.minPos ) pos = Motor.minPos;
               if ( pos > Motor.maxPos ) pos = Motor.maxPos;

	       var node = getSubnodeById(this.node,'bar_state');
	       if ( null == node ) node = getSubnodeById(this.node.parentNode.parentNode,'slat.bar_state');

               if ( this.parent ) this.adjustMaxPosPixel();
               var pixel = this.posToPixel(pos);
	       var trans = (this.coord=='x') ? [pixel,0] : [0,pixel];
               //room.debugOutput( 'Motor: '+this.id+' setCurrentPositionAndState('+pos+', '+state+', '+direction+') node: '+node.nodeName+', pixel:'+pixel);
	       
	       if ( state ) {
		 { var n = getSubnodeById(node,'dir_'+(  direction)); if (n) n.style = 'display: none';   }
		 { var n = getSubnodeById(node,'dir_'+(1-direction)); if (n) n.style = 'display: inline'; }
	         setNodePosition(node, trans[0], trans[1] );
		 node.style = 'visibility:visible';
               } else {
		 node.style = 'visibility:hidden';
		 if ( null == this.currentState || this.currentState && !state ) this.setPosition(pos);
	       }
	 
 	       this.currentPos       = pos;
               this.currentState     = state;
	       this.currentDirection = direction;               
            };



             function P_Window (id) {
	       P_Window.windows[id] = this;
	       this.id              = id;
	       var node = document.getElementById('win_'+id);
	       // to allow access to used tree by <use ...> tag
	       this.init2(node.childNodes[1]) // simple access due to use-tag replaced by the template tree
	       //alert( "window "+id+" constructed, name: "+this.NameNode );
               this.opener = new Motor('opener_'+id,'x',this.getSubNode('opener'));
               this.blind  = new Motor('blind_'+id, 'y',this.getSubNode('blind' ));
               this.slat   = new Motor('slat_'+id,  'x',this.getSubNode('slat'  ), this.blind );

               var buttons = [ 'w_name', 'w_btn_c', 'w_btn_o', 'w_btn_r', 'w_btn_l' ];
	       for (var i = 1; i < buttons.length; i++) {
	         var button = getSubnodeById(node,buttons[i]);
                 button.addEventListener('touchstart',  P_Window.mouseEvent, false);
		 button.addEventListener('touchend',    P_Window.mouseEvent, false);
		 button.addEventListener('touchcancel', P_Window.mouseEvent, false);
		 //button.addEventListener('touchmove', P_Window.mouseEvent, false);
		 button.addEventListener('mousedown',   P_Window.mouseEvent, false);
		 button.addEventListener('mouseup',     P_Window.mouseEvent, false);
		 button.addEventListener('mouseout',    P_Window.mouseEvent, false);
		 //button.addEventListener('mousemove',P_Window.mouseEvent, false);
		 button.dataset.eventId = i;
               }
             }
	     P_Window.windows = {};
	     P_Window.prototype.toString       = function () { return "[Window: '"+this.id+"'"+' '+this.opener+' '+this.blind+' '+this.slat};
	     P_Window.prototype.getSubNode     = function (id)   { return getSubnodeById( this.WinNode, id );   };
	     P_Window.prototype.setName        = function (name) { this.NameNode.children[1].textContent = name };
	     P_Window.prototype.setOpenerState = function (state){ this.NameNode.children[1].textContent = name };
	     P_Window.prototype.setOpenerPos   = function (pos)  { this.NameNode.children[1].textContent = name };

             P_Window.prototype.serverReq = function (reqType,param,hdl)  {
               if ( null == hdl ) hdl = P_Window.resultHandler;
	       serverRequest('/request/window/'+reqType+'.json?win_id='+this.id+param,hdl,this);
	     };
	     P_Window.resultHandler = function (res,self) {
	       if ( null == res ) {
	         room.debugOutput( 'resultHandler error' );
	       } else if ( res.result ) {
		 room.debugOutput( res.toString() );
	       } else {
		 //room.debugOutput( res.toString() );
	         if ( null != res.window && null != res.window.count ) {
		   var count = res.window.count;
		   busy = 0;
		   for ( var i = 0; i < count; i++ ) {
		     var win_data = res['window_'+i];
		     var pWin = P_Window.windows[win_data.id]
		     busy |= ( win_data.opener.state | win_data.blind.state );
		     pWin.opener.setCurrentPositionAndState(win_data.opener.position,win_data.opener.state,win_data.opener.drive_direction);
		     pWin.blind.setCurrentPositionAndState(win_data.blind.position,win_data.blind.state,win_data.blind.drive_direction);
		     pWin.slat.setCurrentPositionAndState(win_data.blind.hard_pos_back*10,win_data.blind.state,win_data.blind.drive_direction);
		   }
		   room.setBusy( busy );  
	         }
	         if ( null != res.sr_state ) {
		   SR_LEDs.result(res,null)
	         }
	       }	 
             };
	     P_Window.prototype.buttonClick       = function (nr)   {
	       if        ( 1 == nr || 2 == nr ) {
	         var pos   = nr == 1 ? this.opener.pos_min : this.opener.pos_max
	         this.serverReq('action','&action=set_position&motor=opener&pos='+pos);
		 this.opener.setPosition( pos );
	       } else if ( 3 == nr || 4 == nr ) {
	         var pos   = nr == 3 ? this.blind.pos_min : this.blind.pos_max;
	         var angle = nr == 3 ? this.slat.pos_max  : this.slat.pos_min;
	         this.serverReq('action','&action=set_position&motor=blind&pos='+pos+'&angle='+angle);
		 this.blind.setPosition( pos );
		 this.slat.setPosition( angle );
	       }
             };
	     P_Window.prototype.buttonPress = function (nr)   {
	       if        ( 1 == nr || 2 == nr ) {
	         var dir = nr == 1 ? 1 : 0
	         this.serverReq('action','&action=drive_direction&motor=opener&dir='+dir);
	       } else if ( 3 == nr || 4 == nr ) {
	         var dir = nr == 3 ? 1 : 0
	         this.serverReq('action','&action=drive_direction&motor=blind&dir='+dir);
	       }
	     };
	     P_Window.prototype.buttonRelease = function (nr)   {
	       if        ( 1 == nr || 2 == nr ) {
	         var pos = nr == 1 ? 100 : 0
	         this.serverReq('action','&action=drive_direction&motor=opener&stop=1');
	       } else if ( 3 == nr || 4 == nr ) {
	         var pos = nr == 3 ? 100 : 0
	         var angle = pos;
	         this.serverReq('action','&action=drive_direction&motor=blind&stop=1');
	       }
	     };
	     P_Window.prototype.init2       = function (win_node) {
	       this.WinNode  = win_node; win_node.P_Window = this;
	       this.NameNode = this.getSubNode('w_name');
	       //alert( "NameNode: "+this.NameNode );
	       this.setName(this.id);
	     };

             P_Window.onuse = function (useNode,winNode) {
	       var id = useNode.id
	       if ( id != null && id.substr(0,4) == 'win_' ) {
	         var wid = id.substr(4);
		 //alert( "create: '"+wid+"', parent: "+getNodeDetails(useNode));
		 new P_Window(wid);
	       }
	     };




             P_Window.mouseEvent = function(event) {
               node = event.currentTarget;
	       nr   = node.dataset.eventId;
	       //pWin    = getWindow(node);
               //alert('id: '+node.id+', pId: '+pWin.id+', eventId: '+nr+', event: '+event.type);

               if ( ( 'mouseout' == event.type || 'touchcancel' == event.type ) && null == P_Window.mouseEvent.data ) return;

               room.logOutput( "Event: "+event.type )

               var dt = 200; // time between down and up for a click
	       if ( 'mousedown' == event.type || 'touchstart' == event.type ) {
	         P_Window.mouseEvent.data = { 'node': node, 'date': Date.now() };
		 event = { 'currentTarget': node, 'type': 'timeout' };
                 P_Window.mouseEvent.data.timeoutID = setTimeout( function () { P_Window.mouseEvent( event ) }, dt );
	       } else if ( 'mouseup' == event.type || 'mouseout' == event.type || 'touchend' == event.type || 'touchcancel' == event.type ) {
	         if ( null != P_Window.mouseEvent.data && node == P_Window.mouseEvent.data.node ) {
		   data = P_Window.mouseEvent.data; P_Window.mouseEvent.data = null;
		   clearTimeout(data.timeoutID);
		   pWin = getWindow(node)
	           if ( ! data.btnPressed ) {
		     toggle_btn('click',1);
		     pWin.buttonClick(nr);
		   } else {
		     toggle_btn('release',1);
		     pWin.buttonRelease(nr);
		   }
	         }
	       } else if ( 'timeout' == event.type ) {
	         data = P_Window.mouseEvent.data;
	         if ( data != null && data.node == node ) {
		   data.btnPressed = 1
		   pWin = getWindow(node);
		   toggle_btn('press',1);
		   pWin.buttonPress(nr);
                 }
	       } else {
	         alert( 'event type: '+event.type );
               }
             };


	     function getUseNode(node) {
	       var win = getWindowNode(node)
	       return win.P_UseNode;
	     }
	     function getWindowNode(node) {
	       if ( node.P_WindowNode ) return node.P_WindowNode;
	       var sucNode = node;
	       var winNode = null;
	       while ( node != null ) {
 	         //if ( winNode != null ) { alert("winNode: "+winNode.dataset.id+', id: '+winNode.id) }
                 //if ( winNode != null && node.parentNode == null && node.host != null ) {
		 //  useNode = node;
	         if ( winNode != null && winNode.dataset.id == 'w_window' ) {
		   useNode = node;
		   winNode.P_UseNode    = useNode;
		   winNode.P_WindowNode = winNode;
	           useNode.P_WindowNode = winNode;
		   sucNode.P_WindowNode = winNode;
		   return winNode;
                 }
		 winNode = node
		 node = node.parentNode
	       }
	       return;
	     }


	     function getWindow(node) {
	       var winNode = getWindowNode(node);
	       if ( winNode.P_Window ) return winNode.P_Window;
               var id = winNode.P_UseNode.id.substr(4);
	       winNode.P_Window = P_Window.initialize2(id,root);
	       return winNode.P_Window;
	     }


	     function getAncesterList(node) {
	       var s = "";
	       while ( node != null ) {
	         s += "\nname: "+node.nodeName+" type: "+node.nodeType+" id: "+node.id+" parentElement: "+node.parentElement+" shadowRoot: "+node.shadowRoot+" host: "+node.host;
		 node = node.parentNode;
	       }
	       return s;
	     }


             function getRoot(node) {
	       while ( node != null && node.parentNode != null ) {
	         node = node.parentNode;
	       }
	       return node;
	     }


             function getNodeDetails(node,obj) {
	       var s = "name: "+node.nodeName+" type: "+node.nodeType+" id: "+node.id+"\n\nAttributes: [";
	       for ( var key in node ) {
	         if ( obj != null ) {
                   if ( node[key] == obj            ) s += "***";
		   if ( node[key] == obj.firstChild ) s += "###";
		 }
		 s += " '"+key+"'"
               }
	       s += " ]\n\n";
	       for ( var key in node.getAttributeNames() ) {
		 s += " '"+node.getAttribute(key)+"'"
               }
	       return s;
	     }



	     function drag_event(obj,nr,t) {
	       win = getWindow(obj);
	       toggle_drag(t,1);
               setTimeout(function(){ toggle_drag(t,0); },300);
	       if ( room.debug ) {
	         var s = "Drag "+t+"!\n";
                 alert( s );
	       }
	     }


	     function bar_click(obj,nr) {
	       getWindow(obj);
	       toggle_click(1);
	       setTimeout(function(){ toggle_click(0); },300);
	       if ( room.debug ) {
	         var id = obj.id;
                 alert('Bar wurde angeklickt!\n'+id)
               }
             }
	       
	     function toggle_click(on) {
	       rect = document.getElementById('ind_click');
	       rect.style.fill = on ? col_pressed : col_button;
             }
	       
	     function toggle_drag(name,on) {
	       rect = document.getElementById('ind_drag_'+name);
	       rect.style.fill = on ? col_pressed : col_button;
             }
	       
	     function toggle_btn(name,on) {
	       rect = document.getElementById('ind_btn_'+name);
	       rect.style.fill = on ? col_pressed : col_button;
	       if ( on ) setTimeout(function(){ toggle_btn(name,0); },300);
             }


	     function SR_LEDs() {
             }
	     SR_LEDs.onuse = function (useNode,node) {
	       var n = parseInt(useNode.id.substr(10));
	       var text = getSubnodeById(node,'text');
	       var on   = getSubnodeById(node,'on');
	       var dir  = getSubnodeById(node,'dir');
	       on. setAttribute('onclick', "SR_LEDs.click("+n+",0,'on')" );
	       dir.setAttribute('onclick', "SR_LEDs.click("+n+",1,'dir')");
	       text.textContent = n*2;
	     };
	     SR_LEDs.click = function (motor,t,name) {
	       var bit = motor * 2 + t
	       if ( -1 == motor ) bit = -1
               serverRequest('/request/sr/action.json?action=toggle_bit&bit='+bit,SR_LEDs.result,null);
	     };
	     SR_LEDs.request = function () { 
               serverRequest('/request/sr_state.json',SR_LEDs.result,null);
	     };
	     SR_LEDs.result = function (res,data) {
	       if ( null == res ) {
	         room.debugOutput( 'SR_LEDs.result handler error' );
	       } else if ( res.result ) {
	         room.debugOutput( 'SR_LEDs result: '+res.toString() );
	       } else if ( null == res.sr_state ) {
		 room.debugOutput( 'missing sr_state in: '+res.toString() );
	       } else {
		 SR_LEDs.showOutput(res.sr_state);
	       }
	     };
	     SR_LEDs.bitToNodeMap = {};
	     SR_LEDs.getBitNode = function (bit) {
	       var node = SR_LEDs.bitToNodeMap[bit]
	       if (null != node ) return node;
	       
               var led   = ( bit & 1 ) ? 'dir' : 'on';
               var motor = document.getElementById('win_motor_'+(bit>>1));
	       return SR_LEDs.bitToNodeMap[bit] = getSubnodeById(motor,led);
	     };
	     SR_LEDs.showOutput = function (state,data) {
	       document.getElementById('LED_enable').style.fill = state.enable ? col_led_on : col_led_off;
	       var buttons = [ 'data', 'clock', 'latch' ];
	       for ( var i = 0; i < buttons.length; i++ ) {
	         var name = buttons[i];
		 node = document.getElementById('btn_sr_'+name);
		 if ( null != node ) {
		   var rect = node.childNodes[1];
		   node.style.fill = state[name] ? col_pressed : col_button;
	         }
	       }
               var bits = state.bits;
	       if ( state.output ) {
	         for ( var bitIdx = 0; bitIdx < bits; bitIdx++ ) {
	           var byteVal = state.output[Math.floor(bitIdx/8)];
	           var bitPos  = bitIdx % 8
		   bitValue = ( byteVal & ( 1 << bitPos) ) ? 1 : 0;

                   ledNode = SR_LEDs.getBitNode(bitIdx);
		   ledNode.style.fill = bitValue ? col_led_on : col_led_off;
	         }
	       }   
             };
	     SR_LEDs.ButtonCode = { 'data': -2, 'clock': -3, 'latch': -4 };  
	     SR_LEDs.clickNode = function (node,name) {
	       var bit = SR_LEDs.ButtonCode[name];
               serverRequest('/request/sr/action.json?action=toggle_bit&bit='+bit,SR_LEDs.result,null);
             };
	     SR_LEDs.thread = function () {
               SR_LEDs.request()
               setTimeout(SR_LEDs.thread,3000);
             };
	     SR_LEDs.thread();
	       
      ]]>
    </script>

    <linearGradient id="gradient_h" x1="0" y1="0" x2="9400" y2="0" gradientUnits="userSpaceOnUse">
      <stop offset="0" style="stop-color:rgb(52,101,164)"/>
      <stop offset="1" style="stop-color:rgb(255,255,255)"/>
    </linearGradient>

    <linearGradient id="gradient_v" x1="0" y1="0" x2="0" y2="9400" gradientUnits="userSpaceOnUse">
      <stop offset="0" style="stop-color:rgb(255,255,255)"/>
      <stop offset="1" style="stop-color:rgb(52,101,164)"/>
    </linearGradient>

    <mask id="mask_h">
      <path style="fill:rgb(255,255,255)" d="M 0,0 L 9400,0 9400,9400 Z"/>
      <path style="fill:rgb(  0,  0,  0)" d="M 0,0 L 0,9400 9400,9400 Z"/>
    </mask>

    <mask id="mask_v">
      <path style="fill:rgb(255,255,255)" d="M 0,0 L 0,9400 9400,9400 Z"/>
      <path style="fill:rgb(  0,  0,  0)" d="M 0,0 L 9400,0 9400,9400 Z"/>
    </mask>

    <!-- start template="w_led" -->
    <g data-id="w_led" data-onuse="SR_LEDs.onuse">
      <text data-id="text" class="LED" x="100" y="370">.</text>
      <circle data-id="on"  class="LED" cx="1000" cy="200" r="200"/>
      <circle data-id="dir" class="LED" cx="1500" cy="200" r="200"/>
    </g>
    <!-- end template="w_led" -->

    <!-- start template="w_window" -->
    <g data-id="w_window" data-onuse="P_Window.onuse">
    
      <g data-id="w_name" transform="translate(0,0)">
	<rect class="Name" x="0" y="0" width="3000" height="2600"/>
	<text class="Name" x="300" y="1900">.</text>
      </g>
    
      <g data-id="w_btn_c" transform="translate(3000,0)">
	<rect class="Button" x="0" y="0" width="4700" height="2600"/>
	<text class="Button" x="1614" y="1486">close</text>
      </g>

      <g data-id="w_btn_o" transform="translate(7700,0)">
	<rect class="Button" x="0" y="0" width="4700" height="2600"/>
	<text class="Button" x="1614" y="1486">open</text>
      </g>
    
      <g data-id="w_btn_r" transform="translate(0,2600)">
	<rect class="Button" x="0" y="0" width="3000" height="4700"/>
	<text class="Button" x="700" y="2500">raise</text>
      </g>
    
      <g data-id="w_btn_l" transform="translate(0,7300)">
	<rect class="Button" x="0" y="0" width="3000" height="4700"/>
	<text class="Button" x="700" y="2500">lower</text>
      </g>

      <g transform="translate(3000,2600)">
	<path style="fill:url(#gradient_h)" d="M 0,0 L 9400,0 9400,9400 Z"/>
	<path style="fill:url(#gradient_v)" d="M 0,0 L 0,9400 9400,9400 Z"/>

	<g data-id="opener" style="mask:url(#mask_h)">
	  <g data-id="bar" transform="translate(300,0)" onmousedown="P_Window.mouseEvent(this,5,1)" onmouseup="P_Window.mouseEvent(this,5,0)">
	    <rect data-id="bar" class="BarStatic" x="0" y="0" width="1100" height="9400"/>
	  </g>
	  <g data-id="bar_state" transform="translate(2000,0)">
	    <rect class="BarDynamic" x="0" y="0" width="1100" height="9400"/>
	    <path data-id="dir_0" class="BarMarker" d="M 100,550 L 1000,100 1000,1000 Z" style="display:none"/>
	    <path data-id="dir_1" class="BarMarker" d="M 1000,550 L 100,100 100,1000 Z" style="display:inline"/>
	  </g>
	</g>

	<g data-id="blind" style="mask:url(#mask_v)">
	  <g data-id="bar" transform="translate(0,6000)" onmousedown="P_Window.mouseEvent(this,6,1)" onmouseup="P_Window.mouseEvent(this,6,0)">
	    <rect class="BarStatic" x="0" y="0" width="9400" height="1100"/>
	    <g data-id="slat" transform="translate(0,0)">
	      <g data-id="bar" transform="translate(0,0)">
	        <rect class="BarMarker" x="100" y="100" width="900" height="900"/>
	      </g>
	    </g>
	  </g>
	  <g data-id="bar_state" transform="translate(0,4000)">
	    <rect class="BarDynamic" x="0" y="0" width="9400" height="1100"/>
	    <g data-id="slat.bar_state" transform="translate(0,0)">
	      <path data-id="dir_0" class="BarMarker" d="M 550,100 L 100,1000 1000,1000 Z" style="display:none"/>
	      <path data-id="dir_1" class="BarMarker" d="M 550,1000 L 100,100 1000,100 Z" style="display:inline"/>
	    </g>
	  </g>
	</g>
	
      </g>

    </g>
    <!-- end template="w_window" -->

  </defs>

  <use id="win_L1" href="#w_window" x="300"   y="500"/>
  <use id="win_R1" href="#w_window" x="13300" y="500"/>
  <use id="win_R3" href="#w_window" x="26300" y="500"/>
  
  <use id="win_L2" href="#w_window" x="300"   y="13000"/>
  <use id="win_R2" href="#w_window" x="13300" y="13000"/>
  <use id="win_R4" href="#w_window" x="26300" y="13000"/>

  <g transform="translate(300,-500)">
    <rect class="Text" x="0" y="0" width="45000" height="700"/>
    <text id="dbg_output" class="DbgOut" x="200" y="500">.</text>
  </g>

  <g transform="translate(300,25400)">
    <rect class="Text" x="0" y="0" width="45000" height="1700"/>
    <text id="log_output" class="LogOut" x="200" y="1500">.</text>
  </g>

  <g transform="translate(39300,500)">
    <g transform="translate(0,0)">
      <g transform="translate(900,300) scale(2.0,2.0)">
	<!-- symbol taken from https://fontawesome.com/icons/cog?style=solid -->
        <path class="Button" d="M487.4 315.7l-42.6-24.6c4.3-23.2 4.3-47 0-70.2l42.6-24.6c4.9-2.8 7.1-8.6 5.5-14-11.1-35.6-30-67.8-54.7-94.6-3.8-4.1-10-5.1-14.8-2.3L380.8 110c-17.9-15.4-38.5-27.3-60.8-35.1V25.8c0-5.6-3.9-10.5-9.4-11.7-36.7-8.2-74.3-7.8-109.2 0-5.5 1.2-9.4 6.1-9.4 11.7V75c-22.2 7.9-42.8 19.8-60.8 35.1L88.7 85.5c-4.9-2.8-11-1.9-14.8 2.3-24.7 26.7-43.6 58.9-54.7 94.6-1.7 5.4.6 11.2 5.5 14L67.3 221c-4.3 23.2-4.3 47 0 70.2l-42.6 24.6c-4.9 2.8-7.1 8.6-5.5 14 11.1 35.6 30 67.8 54.7 94.6 3.8 4.1 10 5.1 14.8 2.3l42.6-24.6c17.9 15.4 38.5 27.3 60.8 35.1v49.2c0 5.6 3.9 10.5 9.4 11.7 36.7 8.2 74.3 7.8 109.2 0 5.5-1.2 9.4-6.1 9.4-11.7v-49.2c22.2-7.9 42.8-19.8 60.8-35.1l42.6 24.6c4.9 2.8 11 1.9 14.8-2.3 24.7-26.7 43.6-58.9 54.7-94.6 1.5-5.5-.7-11.3-5.6-14.1zM256 336c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"/>
      </g>
    </g>

    <g id="bank_1_debug">
      <g transform="translate(0,1900)">
	<rect id="ind_busy" class="Button" x="0" y="0" width="3000" height="1800"/>
	<text class="Button" x="500" y="1400">busy</text>
      </g>

      <g transform="translate(0,3800)">
	<rect id="ind_btn_click" class="Button" x="0" y="0" width="3000" height="1800"/>
	<text class="Button" x="500" y="1400">click</text>
      </g>

      <g transform="translate(0,5700)">
	<rect id="ind_btn_press" class="Button" x="0" y="0" width="3000" height="1800"/>
	<text class="Button" x="500" y="1400">press</text>
      </g>

      <g transform="translate(0,7600)">
	<rect id="ind_btn_release" class="Button" x="0" y="0" width="3000" height="1800"/>
	<text class="Button" x="500" y="1400">release</text>
      </g>
  
      <g transform="translate(0,9500)">
	<rect id="ind_btn_move" class="Button" x="0" y="0" width="3000" height="1800"/>
	<text class="Button" x="500" y="1400">move</text>
      </g>
    </g>
  </g>
  
  <g transform="translate(42400,500)">
    <g transform="translate(0,0)" onclick="room.action_click(this,'all_close')">
      <rect class="Button" x="0" y="0" width="3000" height="1800"/>
      <text class="Button" x="900" y="800">all</text>
      <text class="Button" x="500" y="1500">close</text>
    </g>

    <g transform="translate(0,1900)" onclick="room.action_click(this,'all_open')">
      <rect class="Button" x="0" y="0" width="3000" height="1800"/>
      <text class="Button" x="900" y="800">all</text>
      <text class="Button" x="500" y="1500">open</text>
    </g>

    <g transform="translate(0,3800)" onclick="room.action_click(this,'all_raise')">
      <rect class="Button" x="0" y="0" width="3000" height="1800"/>
      <text class="Button" x="900" y="800">all</text>
      <text class="Button" x="500" y="1500">raise</text>
    </g>
  
    <g transform="translate(0,5700)" onclick="room.action_click(this,'all_lower')">
      <rect class="Button" x="0" y="0" width="3000" height="1800"/>
      <text class="Button" x="900" y="800">all</text>
      <text class="Button" x="500" y="1500">lower</text>
    </g>
  </g>

  <g transform="translate(39300,12200)">
    <g transform="translate(0,0)" onclick="room.toggle_debug(this)">
      <rect id="btn_debug_face" class="Button" x="0" y="0" width="3000" height="1800"/>
      <text class="Button" x="500" y="1400">debug</text>
    </g>

    <g transform="translate(0,1900)" onclick="SR_LEDs.clickNode(this,'data')">
      <rect id="btn_sr_data" class="Button" x="0" y="0" width="3000" height="1800"/>
      <text class="Button" x="500" y="1400">data</text>
    </g>

    <g transform="translate(0,3800)" onclick="SR_LEDs.clickNode(this,'clock')">
      <rect id="btn_sr_clock" class="Button" x="0" y="0" width="3000" height="1800"/>
      <text class="Button" x="500" y="1400">clock</text>
    </g>
  
    <g transform="translate(0,5700)" onclick="SR_LEDs.clickNode(this,'latch')">
      <rect id="btn_sr_latch" class="Button" x="0" y="0" width="3000" height="1800"/>
      <text class="Button" x="500" y="1400">latch</text>
    </g>

    <g transform="translate(0,7600)">
      <a xlink:href="..">
        <rect id="btn_sr_latch" class="Button" x="0" y="0" width="3000" height="1800"/>
        <text class="Button" x="500" y="1400">back</text>
      </a>
    </g>
    
    <g transform="translate(0,9500)">
      <a xlink:href="/">
        <rect id="btn_sr_latch" class="Button" x="0" y="0" width="3000" height="1800"/>
        <text class="Button" x="500" y="1400">home</text>
      </a>
    </g>
  </g>


  <g transform="translate(42400,12200)">
    <rect class="Text" x="0" y="0" width="1900" height="12800"/>
    <circle id="LED_enable" class="LED" cx="300" cy="300" r="200" onclick="SR_LEDs.click(-1,-1,'enable')"/>
    <text class="LED" x="800" y="400">en</text>

    <use id="win_motor_0"  href="#w_led" x="0" y="700"/>
    <use id="win_motor_1"  href="#w_led" x="0" y="1200"/>
    <use id="win_motor_2"  href="#w_led" x="0" y="1700"/>
    <use id="win_motor_3"  href="#w_led" x="0" y="2200"/>
    <use id="win_motor_4"  href="#w_led" x="0" y="2700"/>
    <use id="win_motor_5"  href="#w_led" x="0" y="3200"/>
    <use id="win_motor_6"  href="#w_led" x="0" y="3700"/>
    <use id="win_motor_7"  href="#w_led" x="0" y="4200"/>
    <use id="win_motor_8"  href="#w_led" x="0" y="4700"/>
    <use id="win_motor_9"  href="#w_led" x="0" y="5200"/>
    <use id="win_motor_10" href="#w_led" x="0" y="5700"/>
    <use id="win_motor_11" href="#w_led" x="0" y="6200"/>
    <use id="win_motor_12" href="#w_led" x="0" y="6700"/>
    <use id="win_motor_13" href="#w_led" x="0" y="7200"/>
    <use id="win_motor_14" href="#w_led" x="0" y="7700"/>
    <use id="win_motor_15" href="#w_led" x="0" y="8200"/>
    <use id="win_motor_16" href="#w_led" x="0" y="8700"/>
    <use id="win_motor_17" href="#w_led" x="0" y="9200"/>
    <use id="win_motor_18" href="#w_led" x="0" y="9700"/>
    <use id="win_motor_19" href="#w_led" x="0" y="10200"/>
    <use id="win_motor_20" href="#w_led" x="0" y="10700"/>
    <use id="win_motor_21" href="#w_led" x="0" y="11200"/>
    <use id="win_motor_22" href="#w_led" x="0" y="11700"/>
    <use id="win_motor_23" href="#w_led" x="0" y="12200"/>
  </g>

</svg>
