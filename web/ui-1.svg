<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.2" _width="154mm" _height="85.9mm" width="308mm" height="171.8mm" viewBox="0 0 53000 26000" preserveAspectRatio="xMidYMid" fill-rule="evenodd" stroke-width="28.222" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:anim="urn:oasis:names:tc:opendocument:xmlns:animation:1.0" xml:space="preserve" onload="P_initialize(evt)" >

  <!--defs>
    <font id="EmbeddedFont_1">
      <font-face font-family="Liberation Sans embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="1852" descent="423">
	<font-face-src>
	  <font-face-uri xlink:href="/fonts.svg#Font_1" />
	</font-face-src>
      </font-face>
    </font>
  </defs -->

  <defs>
    
    <style type="text/css">
      <![CDATA[
    @font-face      { font-family: 'Liberation Sans embedded'; font-weight: normal;
                      font-style: italic;
                      src: url("fonts.svg#Font1") format("svg")
                    }

    rect.Name       { fill:rgb(0,204,255);   stroke:rgb(52,101,164); }
    text.Name       { font-family:"Liberation Sans embedded"; font-size:1905px; font-weight:400; }

    rect.Button     { fill:rgb(112,153,204); stroke:rgb(52,101,164); }
    path.Button     { fill:rgb(112,153,204); stroke:rgb(52,101,164); }
    //text.Button     { font-family:"Liberation Sans, sans-serif"; font-size:635px; font-weight:400; }
    text.Button     { font-family:"Liberation Sans embedded"; font-size:635px; font-weight:400; }

    rect.BarStatic  { fill:rgb(102,102,255); stroke:rgb(52,101,164); }
    rect.BarDynamic { fill:rgb(204,102,255); stroke:rgb(52,101,164); }
    path.BarMarker  { fill:rgb(112,153,204); stroke:rgb(52,101,164); }

      ]]>
    </style>

    <script type="text/javascript">
      <![CDATA[

             var debug = false;

             function getSubnodeById(node,id) {
               if ( node.id == id ) {
	         //alert( "found node having id: "+id )
	         return node
	       }
	       //alert( "node "+node.nodeName+" id "+node.id+" type "+node.nodeType+" has "+node.childNodes.length+" children" )	 
               var children = node.childNodes;
               for ( var i = 0; i < children.length; i++ ) {
	         var child = children[i]
	         //alert( 'look into node '+child.nodeName )
	         var n = getSubnodeById( child, id );
	         if ( n != null ) return n
	       }
	       return null
	     }

             function serverRequest(url) {
	       xmlHTTP = new XMLHttpRequest();
	       xmlHTTP.onload = function() {
	         if (this.readyState == 4 && this.status == 200) {
	           draw();
	         }
               };
               xmlHTTP.open("GET", url, true);
	       xmlHTTP.send();
	     }

             function P_Window (id) {
	       P_Window.windows[id] = this;
	       this.id              = id;
	       var node = document.getElementById('win_'+id);
	       //alert( "window "+id+" constructed, name: "+this.NameNode );
	     }
	     P_Window.windows = {};
	     P_Window.prototype.getSubNode = function (id)   { return getSubnodeById( this.WinNode, id );   };
	     P_Window.prototype.setName    = function (name) { this.NameNode.children[1].textContent = name };

             P_Window.prototype.serverReq  = function (url)  {
	       serverRequest('/request/window?id='+this.id+url)
	     }
	     P_Window.prototype.click      = function (nr)   {
	       this.serverReq('&action='+nr)
	     }
	     P_Window.prototype.init2      = function (win_node) {
	       this.WinNode  = win_node; win_node.P_Window = this;
	       this.NameNode = this.getSubNode('w_name');
	       //alert( "NameNode: "+this.NameNode );
	       this.setName(this.id);
	     };
	     P_Window.initialize2 = function (id,win_node) {
	       p_win = P_Window.windows[id]
	       p_win.init2(win_node);
	       return p_win
	     };

             function P_initialize (evt) {
               if ( false ) {
	         var eList = document.getElementsByName('text__');
	         alert( "elements.length: "+eList.length )
	         for ( var i = 0; i < eList.length; i++ ) {
	           var e = eList[i];
	           alert( "e: "+e.id );
                   if ( e.parentNode != null && e.parentNode.id == 'w_name' ) {
		     var win = e.parentNode.parentNode;
		     var use = win.host;
		     use.subtree = win;
		     alert( "set subtree for "+use.id);
		   }
	         }
               }
	       new P_Window('R1');
	       new P_Window('R2');
	       new P_Window('R3');
	       new P_Window('R4');
	       new P_Window('L1');
	     }

	       
	     function getUseNode(node) {
	       var root = getRootNode(node)
	       return root.parentNode.host;
	     }
	     function getRootNode(node) {
	       if ( node.rootNode ) return node.rootNode;
	       var succ = node;
	       var root = null;
	       while ( node != null ) {
                 if ( root != null && node.parentNode == null && node.host != null ) {
	           node.host.subtree = root;
		   root.rootNode = root;
		   succ.rootNode = root;
		   return root;
                 }
		 root = node
		 node = node.parentNode
	       }
	       return;
	     }


	     function getWindowNode(node) {
	       var root = getRootNode(node);
	       if ( root.P_WindowNode ) return root.P_WindowNode;
	       if ( ! root.P_initialized ) {
                 var id = root.parentNode.host.id.substr(4);
		 //alert( "init subtree: "+id+" "+node.host );
		 p_win = P_Window.initialize2(id,root)
		 root.P_WindowNode = p_win;
		 node.P_WindowNode = p_win;
		 return p_win;
	       }
	       alert("could not find uninitilized P_Window")
	       return null;
	     }


             function getWindow(node) {
               return getWindowNode(node).P_Window;
             }


	     function getAncesterList(node) {
	       var s = "";
	       while ( node != null ) {
	         s += "\nname: "+node.nodeName+" type: "+node.nodeType+" id: "+node.id+" parentElement: "+node.parentElement+" shadowRoot: "+node.shadowRoot+" host: "+node.host;
		 node = node.parentNode;
	       }
	       return s;
	     }


             function getRoot(node) {
	       while ( node != null && node.parentNode != null ) {
	         node = node.parentNode;
	       }
	       return node;
	     }


             function getNodeDetails(node,obj) {
	       var s = " [";
	       for ( var key in node ) {
	         if ( obj != null ) {
                   if ( node[key] == obj            ) s += "***";
		   if ( node[key] == obj.firstChild ) s += "###";
		 }
		 s += " '"+key+"'"
               }
	       s += " ]\n\n";
	       for ( var key in node.getAttributeNames() ) {
		 s += " '"+node.getAttribute(key)+"'"
               }
	       return s;
	     }


             function button_create(obj,nr) {
	       getWindowNode(obj);
	       //var s = "Button wurde generiert!\n";
     	       //s += getAncesterList(obj)
               //alert( s );
	     }


	     function button_click(obj,nr) {
	       win = getWindowNode(obj);
	       win.click(nr);
	       toggle_click(1);
	       setTimeout(function(){ toggle_click(0); },300);	       
               if ( debug ) {
                 var s = "Button wurde angeklickt!\n";
     	         s += getAncesterList(obj)
	         var r = getRoot(obj)
	         if ( r.host != null ) {
		   var host = r.host;
	           s += " host.id: "+host.id+"\n";
	           s += getNodeDetails(host,r.firstChild);
	           s += "\nnodeValue: "+host.nodeValue;
		   s += "\nsubtree: "+host.subtree;
	         }
                 alert( s );
	       }
	     }


	     function mouse(obj,nr,t) {
	       win = getWindowNode(obj);
	       toggle_mouse(t);
               if ( debug ) {
	         var s = "Mouse "+t+"!\n";
                 alert( s );
	       }
	     }


	     function drag_event(obj,nr,t) {
	       win = getWindowNode(obj);
	       toggle_drag(t,1);
               setTimeout(function(){ toggle_drag(t,0); },300);
	       if ( debug ) {
	         var s = "Drag "+t+"!\n";
                 alert( s );
	       }
	     }


	     function bar_click(obj,nr) {
	       getWindowNode(obj);
	       toggle_click(1);
	       setTimeout(function(){ toggle_click(0); },300);
	       if ( debug ) {
	         var id = obj.id;
                 alert('Bar wurde angeklickt!\n'+id)
               }
             }
	       
	     function toggle_debug(node) {
	       debug = ! debug;
	       rect  = document.getElementById('btn_debug_face'); // node.childNodes[1];
	       //alert( "rect: "+rect );
	       rect.style.fill = debug ? "rgb(204,102,255)" : "rgb(112,153,204)"
             }
	       
	     function toggle_mouse(on) {
	       rect = document.getElementById('ind_mouse');
	       rect.style.fill = on ? "rgb(204,102,255)" : "rgb(112,153,204)"
             }
  
	     function toggle_click(on) {
	       rect = document.getElementById('ind_click');
	       rect.style.fill = on ? "rgb(204,102,255)" : "rgb(112,153,204)"
             }
	       
	     function toggle_drag(name,on) {
	       rect = document.getElementById('ind_drag_'+name);
	       rect.style.fill = on ? "rgb(204,102,255)" : "rgb(112,153,204)"
             }
      ]]>
    </script>

    <linearGradient id="gradient_h" x1="0" y1="0" x2="9400" y2="0" gradientUnits="userSpaceOnUse">
      <stop offset="0" style="stop-color:rgb(52,101,164)"/>
      <stop offset="1" style="stop-color:rgb(255,255,255)"/>
    </linearGradient>

    <linearGradient id="gradient_v" x1="0" y1="0" x2="0" y2="9400" gradientUnits="userSpaceOnUse">
      <stop offset="0" style="stop-color:rgb(255,255,255)"/>
      <stop offset="1" style="stop-color:rgb(52,101,164)"/>
    </linearGradient>

    <mask id="mask_h">
      <path style="fill:rgb(255,255,255)" d="M 0,0 L 9400,0 9400,9400 Z"/>
      <path style="fill:rgb(  0,  0,  0)" d="M 0,0 L 0,9400 9400,9400 Z"/>
    </mask>

    <mask id="mask_v">
      <path style="fill:rgb(255,255,255)" d="M 0,0 L 0,9400 9400,9400 Z"/>
      <path style="fill:rgb(  0,  0,  0)" d="M 0,0 L 9400,0 9400,9400 Z"/>
    </mask>

    
    <g id="w_window" onmouseover="button_create(this,0)">
    
      <g id="w_name" transform="translate(0,0)" onclick="button_click(this,0)" onmousedown="mouse(this,0,1)" onmouseup="mouse(this,0,0)">
	<rect class="Name" x="0" y="0" width="3000" height="2600"/>
	<text class="Name" x="300" y="1900">.</text>
      </g>
    
      <g id="w_btn_c" transform="translate(3000,0)" onclick="button_click(this,1)" onmousedown="mouse(this,1,1)" onmouseup="mouse(this,1,0)">
	<rect class="Button" x="0" y="0" width="4700" height="2600"/>
	<text class="Button" x="1614" y="1486">close</text>
      </g>

      <g id="w_btn_o" transform="translate(7700,0)" onclick="button_click(this,2)" onmousedown="mouse(this,2,1)" onmouseup="mouse(this,2,0)">
	<rect class="Button" x="0" y="0" width="4700" height="2600"/>
	<text class="Button" x="1614" y="1486">open</text>
      </g>
    
      <g id="w_btn_r" transform="translate(0,2600)" onclick="button_click(this,3)" onmousedown="mouse(this,3,1)" onmouseup="mouse(this,3,0)">
	<rect class="Button" x="0" y="0" width="3000" height="4700"/>
	<text class="Button" x="700" y="2500">raise</text>
      </g>
    
      <g id="w_btn_l" transform="translate(0,7300)" onclick="button_click(this,4)">
	<rect class="Button" x="0" y="0" width="3000" height="4700"/>
	<text class="Button" x="700" y="2500">lower</text>
      </g>

      <g id="id5" transform="translate(3000,2600)">
	<path style="fill:url(#gradient_h)" d="M 0,0 L 9400,0 9400,9400 Z"/>
	<path style="fill:url(#gradient_v)" d="M 0,0 L 0,9400 9400,9400 Z"/>

	<g id="id5_h" style="mask:url(#mask_h)">
	  <rect class="BarStatic" x="0" y="0" width="1100" height="9400" onclick="bar_click(this,5)" onmousedown="mouse(this,5,1)" onmouseup="mouse(this,5,0)" ondragstart="drag_event(this,5,0)" ondrag="drag_event(this,5,1)" ondragend="drag_event(this,5,2)"/>
	  <g id="id5_hD" transform="translate(2000,0)">
	    <rect class="BarDynamic" x="0" y="0" width="1100" height="9400"/>
	    <path class="BarMarker" d="M 100,550 L 1000,100 1000,1000 Z" style="display:none"/>
	    <path class="BarMarker" d="M 1000,550 L 100,100 100,1000 Z" style="display:inline"/>
	  </g>
	</g>

	<g id="id5_v" style="mask:url(#mask_v)">
	  <rect class="BarStatic" x="0" y="6000" width="9400" height="1100" onclick="bar_click(this,6)" onmousedown="mouse(this,6,1)"  onmousemove="mouse(this,6,2)" onmouseup="mouse(this,6,0)"/>
	  <g id="id5_vD" transform="translate(0,4000)">
	    <rect class="BarDynamic" x="0" y="0" width="9400" height="1100"/>
	    <path class="BarMarker" d="M 550,100 L 100,1000 1000,1000 Z" style="display:none"/>
	    <path class="BarMarker" d="M 550,1000 L 100,100 1000,100 Z" style="display:inline"/>
	  </g>
	</g>
	
      </g>

    </g>

  </defs>

  <use id="win_R1" href="#w_window" x="500"   y="500"/>
  <use id="win_R2" href="#w_window" x="13500" y="500"/>
  <use id="win_R3" href="#w_window" x="26500" y="500"/>
  <use id="win_R4" href="#w_window" x="39500" y="500"/>
  
  <use id="win_L1" href="#w_window" x="500"   y="13000"/>

  <g transform="translate(13500,13000)" onclick="toggle_debug(this)">
    <rect id="btn_debug_face" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">debug</text>
  </g>

  <g transform="translate(13500,14900)">
    <rect id="ind_mouse" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">mouse</text>
  </g>

  <g transform="translate(13500,16800)">
    <rect id="ind_move" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">move</text>
  </g>

  <g transform="translate(13500,20700)">
    <rect id="ind_click" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">click</text>
  </g>

  
  <g transform="translate(16600,13000)" onclick="toggle_debug(this)">
    <rect id="ind_drag_0" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">start</text>
  </g>

  <g transform="translate(16600,14900)">
    <rect id="ind_drag_1" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">drag</text>
  </g>

  <g transform="translate(16600,16800)">
    <rect id="ind_drag_2" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">end</text>
  </g>

  <g transform="translate(16600,20700)">
    <rect id="ind_" class="Button" x="0" y="0" width="3000" height="1800"/>
    <text class="Button" x="500" y="1400">_</text>
  </g>

  
</svg>
